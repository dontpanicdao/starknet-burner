// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that IStoreMock does implement IStore.
// If this is not the case, regenerate this file with moq.
var _ IStore = &IStoreMock{}

// IStoreMock is a mock implementation of IStore.
//
//	func TestSomethingThatUsesIStore(t *testing.T) {
//
//		// make and configure a mocked IStore
//		mockedIStore := &IStoreMock{
//			createRequestFunc: func(authorizationRequest *AuthorizationRequest) error {
//				panic("mock out the createRequest method")
//			},
//			createSignedAuthorizationFunc: func(sessionKey *SignedAuthorization) error {
//				panic("mock out the createSignedAuthorization method")
//			},
//			readRequestFunc: func(s string) (*AuthorizationRequest, error) {
//				panic("mock out the readRequest method")
//			},
//			readSignedAuthorizationFunc: func(s string) (*SignedAuthorization, error) {
//				panic("mock out the readSignedAuthorization method")
//			},
//		}
//
//		// use mockedIStore in code that requires IStore
//		// and then make assertions.
//
//	}
type IStoreMock struct {
	// createRequestFunc mocks the createRequest method.
	createRequestFunc func(authorizationRequest *AuthorizationRequest) error

	// createSignedAuthorizationFunc mocks the createSignedAuthorization method.
	createSignedAuthorizationFunc func(sessionKey *SignedAuthorization) error

	// readRequestFunc mocks the readRequest method.
	readRequestFunc func(s string) (*AuthorizationRequest, error)

	// readSignedAuthorizationFunc mocks the readSignedAuthorization method.
	readSignedAuthorizationFunc func(s string) (*SignedAuthorization, error)

	// calls tracks calls to the methods.
	calls struct {
		// createRequest holds details about calls to the createRequest method.
		createRequest []struct {
			// AuthorizationRequest is the authorizationRequest argument value.
			AuthorizationRequest *AuthorizationRequest
		}
		// createSignedAuthorization holds details about calls to the createSignedAuthorization method.
		createSignedAuthorization []struct {
			// SessionKey is the sessionKey argument value.
			SessionKey *SignedAuthorization
		}
		// readRequest holds details about calls to the readRequest method.
		readRequest []struct {
			// S is the s argument value.
			S string
		}
		// readSignedAuthorization holds details about calls to the readSignedAuthorization method.
		readSignedAuthorization []struct {
			// S is the s argument value.
			S string
		}
	}
	lockcreateRequest             sync.RWMutex
	lockcreateSignedAuthorization sync.RWMutex
	lockreadRequest               sync.RWMutex
	lockreadSignedAuthorization   sync.RWMutex
}

// createRequest calls createRequestFunc.
func (mock *IStoreMock) createRequest(authorizationRequest *AuthorizationRequest) error {
	if mock.createRequestFunc == nil {
		panic("IStoreMock.createRequestFunc: method is nil but IStore.createRequest was just called")
	}
	callInfo := struct {
		AuthorizationRequest *AuthorizationRequest
	}{
		AuthorizationRequest: authorizationRequest,
	}
	mock.lockcreateRequest.Lock()
	mock.calls.createRequest = append(mock.calls.createRequest, callInfo)
	mock.lockcreateRequest.Unlock()
	return mock.createRequestFunc(authorizationRequest)
}

// createRequestCalls gets all the calls that were made to createRequest.
// Check the length with:
//
//	len(mockedIStore.createRequestCalls())
func (mock *IStoreMock) createRequestCalls() []struct {
	AuthorizationRequest *AuthorizationRequest
} {
	var calls []struct {
		AuthorizationRequest *AuthorizationRequest
	}
	mock.lockcreateRequest.RLock()
	calls = mock.calls.createRequest
	mock.lockcreateRequest.RUnlock()
	return calls
}

// createSignedAuthorization calls createSignedAuthorizationFunc.
func (mock *IStoreMock) createSignedAuthorization(sessionKey *SignedAuthorization) error {
	if mock.createSignedAuthorizationFunc == nil {
		panic("IStoreMock.createSignedAuthorizationFunc: method is nil but IStore.createSignedAuthorization was just called")
	}
	callInfo := struct {
		SessionKey *SignedAuthorization
	}{
		SessionKey: sessionKey,
	}
	mock.lockcreateSignedAuthorization.Lock()
	mock.calls.createSignedAuthorization = append(mock.calls.createSignedAuthorization, callInfo)
	mock.lockcreateSignedAuthorization.Unlock()
	return mock.createSignedAuthorizationFunc(sessionKey)
}

// createSignedAuthorizationCalls gets all the calls that were made to createSignedAuthorization.
// Check the length with:
//
//	len(mockedIStore.createSignedAuthorizationCalls())
func (mock *IStoreMock) createSignedAuthorizationCalls() []struct {
	SessionKey *SignedAuthorization
} {
	var calls []struct {
		SessionKey *SignedAuthorization
	}
	mock.lockcreateSignedAuthorization.RLock()
	calls = mock.calls.createSignedAuthorization
	mock.lockcreateSignedAuthorization.RUnlock()
	return calls
}

// readRequest calls readRequestFunc.
func (mock *IStoreMock) readRequest(s string) (*AuthorizationRequest, error) {
	if mock.readRequestFunc == nil {
		panic("IStoreMock.readRequestFunc: method is nil but IStore.readRequest was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockreadRequest.Lock()
	mock.calls.readRequest = append(mock.calls.readRequest, callInfo)
	mock.lockreadRequest.Unlock()
	return mock.readRequestFunc(s)
}

// readRequestCalls gets all the calls that were made to readRequest.
// Check the length with:
//
//	len(mockedIStore.readRequestCalls())
func (mock *IStoreMock) readRequestCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockreadRequest.RLock()
	calls = mock.calls.readRequest
	mock.lockreadRequest.RUnlock()
	return calls
}

// readSignedAuthorization calls readSignedAuthorizationFunc.
func (mock *IStoreMock) readSignedAuthorization(s string) (*SignedAuthorization, error) {
	if mock.readSignedAuthorizationFunc == nil {
		panic("IStoreMock.readSignedAuthorizationFunc: method is nil but IStore.readSignedAuthorization was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockreadSignedAuthorization.Lock()
	mock.calls.readSignedAuthorization = append(mock.calls.readSignedAuthorization, callInfo)
	mock.lockreadSignedAuthorization.Unlock()
	return mock.readSignedAuthorizationFunc(s)
}

// readSignedAuthorizationCalls gets all the calls that were made to readSignedAuthorization.
// Check the length with:
//
//	len(mockedIStore.readSignedAuthorizationCalls())
func (mock *IStoreMock) readSignedAuthorizationCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockreadSignedAuthorization.RLock()
	calls = mock.calls.readSignedAuthorization
	mock.lockreadSignedAuthorization.RUnlock()
	return calls
}
